select * from retail_events_db.dim_products;
select * from retail_events_db.dim_campaigns;
select * from retail_events_db.dim_stores;
select * from retail_events_db.fact_events;

1.	Provide a list of products with a base price greater than 500 and that are featured in promo type of 'BOGOF' (Buy One Get One Free). This information will help us 
identify high-value products that are currently being heavily discounted, which can be useful for evaluating our pricing and promotion strategies.

select distinct product_name from retail_events_db.dim_products inner join retail_events_db.fact_events
on dim_products.product_code = fact_events.product_code
where base_price > 500 AND promo_type = 'BOGOF';


2.	Generate a report that provides an overview of the number of stores in each city. The results will be sorted in descending order of store counts, allowing us to 
identify the cities with the highest store presence.The report includes two essential fields: city and store count, which will assist in optimizing our retail operations.

select city, count(distinct fact_events.store_id) as store_count
from retail_events_db.dim_stores inner join retail_events_db.fact_events
on dim_stores.store_id = fact_events.store_id
group by city;


3.	Generate a report that displays each campaign along with the total revenue generated before and after the campaign? The report includes three key fields: 
campaign_name, totaI_revenue(before_promotion), totaI_revenue(after_promotion). This report should help in evaluating the financial impact of our promotional campaigns. 
(Display the values in millions)

select campaign_name,
sum(base_price * `quantity_sold(before_promo)`)/1000000 as total_revenue_before_promo,
sum(case 
when fact_events.promo_type = '25% OFF' then fact_events.base_price * 0.75 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '33% OFF' then fact_events.base_price * 0.67 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '50% OFF' then fact_events.base_price * 0.50 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '500 Cashback' then (fact_events.base_price - 500) * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = 'BOGOF' then fact_events.base_price * 0.50 * fact_events.`quantity_sold(after_promo)` * 2
else fact_events.base_price * fact_events.`quantity_sold(after_promo)`
end) / 1000000 as total_revenue_after_promo
from retail_events_db.fact_events inner join retail_events_db.dim_campaigns on dim_campaigns.campaign_id = fact_events.campaign_id
group by campaign_name;


4.	Produce a report that calculates the Incremental Sold Quantity (ISU%) for each category during the Diwali campaign. Additionally, provide rankings for the categories 
based on their ISU%. The report will include three key fields: category, isu%, and rank order. This information will assist in assessing the category-wise success and 
impact of the Diwali campaign on incremental sales.

with cte as (
select category,
sum(`quantity_sold(before_promo)`) as quantity_before_promo,
((sum(case when (promo_type = 'BOGOF') then (`quantity_sold(after_promo)` * 2) else `quantity_sold(after_promo)` end)) 
- sum(`quantity_sold(before_promo)`)) as  ISU,
  ROUND((sum((CASE WHEN (promo_type = 'BOGOF') THEN (`quantity_sold(after_promo)` * 2) ELSE `quantity_sold(after_promo)` END)) - SUM(`quantity_sold(before_promo)`)) / SUM(`quantity_sold(before_promo)`) * 100, 2) AS ISU_percent
from retail_events_db.fact_events inner join retail_events_db.dim_campaigns on fact_events.campaign_id = dim_campaigns.campaign_id
inner join retail_events_db.dim_products on dim_products.product_code = fact_events.product_code
where campaign_name = 'Diwali'
group by category
order by ISU_percent desc
)
select category, ISU_percent,
rank() over (order by ISU_percent desc) as ranking
from cte
order by ISU_percent desc;


5.	Create a report featuring the Top 5 products, ranked by Incremental Revenue Percentage (IR%), across all campaigns. The report will provide essential information 
including product name, category, and ir%. This analysis helps identify the most successful products in terms of incremental revenue across our campaigns, assisting in 
product optimization.

with cte as (
select product_name, category,
sum(`quantity_sold(before_promo)` * base_price) as revenue_before_promo,
sum(case 
when fact_events.promo_type = '25% OFF' then fact_events.base_price * 0.75 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '33% OFF' then fact_events.base_price * 0.67 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '50% OFF' then fact_events.base_price * 0.50 * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = '500 Cashback' then (fact_events.base_price - 500) * fact_events.`quantity_sold(after_promo)`
when fact_events.promo_type = 'BOGOF' then fact_events.base_price * 0.50 * fact_events.`quantity_sold(after_promo)` * 2
else fact_events.base_price * fact_events.`quantity_sold(after_promo)`
end) as revenue_after_promo
from retail_events_db.fact_events inner join retail_events_db.dim_products on fact_events.product_code = dim_products.product_code
group by product_name,category
)
select product_name, category,
round(((sum(revenue_after_promo) - sum(revenue_before_promo))/sum(revenue_before_promo))*100,2) as IR_percent
from cte 
group by product_name, category 
order by IR_percent desc limit 5;
